<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>一个高速、安全、可以复活被墙IP的VPN —— WireGuard 服务端手动Ubuntu教程</title>
    <url>//blog/2019/12/28/title5/</url>
    <content><![CDATA[<h2 id="WireGuard简单介绍"><a href="#WireGuard简单介绍" class="headerlink" title="WireGuard简单介绍"></a>WireGuard简单介绍</h2><p><em>注意：</em>WireGuard 是通过 <strong>UDP</strong> 协议传输数据的，这意味着它可以搭建在被墙的服务器上使用，<strong>复活被墙IP</strong>！</p>
<p><em>同时：</em>因为是 UDP 传输的，所以也<strong>不怕被墙</strong>，锐速、BBR 这类TCP加速工具也不会对其起到加速作用。</p>
<p><em>另外：</em>如果你<strong>当地运营商对海外 UDP 链接进行 QOS 限速</strong>，那么速度可能不如使用 TCP 链接的代理软件理想。</p>
<p>至于该 VPN 是否容易被GFW针对封锁，目前还不得而知，至少目前 WireGuard 连 1.0 正式版都不算。</p>
<h3 id="更少的代码"><a href="#更少的代码" class="headerlink" title="更少的代码"></a>更少的代码</h3><p>相比于 OpenVPN 、 IPSec 的几十万行代码，WireGuard 只有短短的四千行。</p>
<h3 id="更容易部署"><a href="#更容易部署" class="headerlink" title="更容易部署"></a>更容易部署</h3><p>对于初次接触的人来说，相比于其他VPN协议，WireGuard 更容易部署。</p>
<h3 id="更安全的加密"><a href="#更安全的加密" class="headerlink" title="更安全的加密"></a>更安全的加密</h3><ul>
<li><p><a href="https://cr.yp.to/ecdh.html" target="_blank" rel="noopener">Curve25519</a> 目前最高水平的秘钥交换算法。</p>
</li>
<li><p>ChaCha20 对称加解密算法，比 AES 更快更高效。</p>
</li>
<li><p><a href="https://en.wikipedia.org/wiki/Poly1305" target="_blank" rel="noopener">Poly1305</a> 是一种 <a href="https://en.wikipedia.org/wiki/Message_authentication_code" target="_blank" rel="noopener">MAC (Message Authentication Code)</a> 标准，用于验证数据的完整性和消息的真实性。</p>
</li>
<li><p><a href="https://en.wikipedia.org/wiki/BLAKE_(hash_function)" target="_blank" rel="noopener">BLAKE2</a> 一种更安全的 HASH 算法（类似的有 SHA1, SHA256, MD5）</p>
</li>
<li><p><a href="https://en.wikipedia.org/wiki/SipHash" target="_blank" rel="noopener">SipHash24</a> 另一种 HASH 算法。</p>
</li>
<li><p><a href="https://en.wikipedia.org/wiki/HKDF" target="_blank" rel="noopener">HKDF</a> 一种秘钥衍生算法。</p>
</li>
<li><p><strong>官方网站：<a href="https://www.wireguard.com/" target="_blank" rel="noopener">https://www.wireguard.com/</a></strong>   （要翻墙）</p>
<hr>
<p>再多的我也编不出来了，大家凑活着看吧。</p>
<p>目前该地区对 VPN 的封锁日益加重，就连 Cisco AnyConnect VPN 思科VPN都在逐渐被干扰(前段时间开始不少人向我反馈频繁断开连接 和 干脆连不上)，所以对 VPN 有需求的可以考虑一下 WireGuard ，而且WireGuard 还比 思科VPN配置简单，不需要导入证书什么的。</p>
<p>因为其链接特性，所以 WireGuard 有很好的稳定性，无论你怎么切换网络 或者 网络波动导致断开后，往往可以很快恢复链接，所以如果拿来加速游戏的话，可能效果不错(当然前提是你的代理服务器也要网络不错)。</p>
<h2 id="前提要求"><a href="#前提要求" class="headerlink" title="前提要求"></a>前提要求</h2><ul>
<li><strong>系统要求：</strong>Debian 8 / 9、Ubuntu 14.04 / 16.04 / 18.04 / 18.10</li>
<li><strong>服务器要求：</strong>OpenVZ 虚拟化的服务器不支持安装该VPN，其他虚拟化均可。</li>
</ul>
<p>如果担心出错，那么我<strong>推荐 Debian9、Ubuntu16.04 / 18.04 / 18.10 系统</strong>，这些较新的系统更不容易出错，相对来说 <strong>Ubuntu 系统安装更方便！</strong></p>
<blockquote>
<p><em>注意：</em>如果你用的是 Vultr、DO，且你本地没有 IPv6 地址，那就不要勾选 <strong>Enable IPv6</strong> ，否则可能客户端链接时可能会出错。</p>
</blockquote>
<p><strong>另外，请确保你的系统是纯净的，建议重装系统后直接开始本教程！</strong></p>
<blockquote>
<p><strong>CentOS7</strong> 系统可以参考下<a href="https://www.wireguard.com/install/#red-hat-enterprise-linux-centos-module-tools" target="_blank" rel="noopener">官方给的安装代码</a>，至于后面的配置步骤什么的全系统通用。因为时间有限，目前只测试了各个 Debian Ubuntu 系统，有空的话我测试下 CentOS7，补充下手动教程。</p>
</blockquote>
</li>
</ul>
<h3 id="配置PPA"><a href="#配置PPA" class="headerlink" title="配置PPA"></a>配置PPA</h3><p>首先如果你是 Ubuntu 14.04 系统，那么请先安装 PPA：</p>
<pre><code class="bash"># 以下步骤仅限 Ubuntu 14.04 系统执行
apt update
apt install software-properties-common -y</code></pre>
<p>安装完成后，我们还需要通过 PPA 工具添加 WireGuard 源：</p>
<pre><code class="bash">add-apt-repository ppa:wireguard/wireguard
# 执行后提示如下示例内容（仅供参考）： 

root@doubi:~# add-apt-repository ppa:wireguard/wireguard 
WireGuard is a novel VPN that runs inside the Linux Kernel. This is the Ubuntu packaging for WireGuard. More info may be found at its website, listed below. 

More info: https://www.wireguard.com/
Packages: wireguard wireguard-tools wireguard-dkms 

Install with: $ apt install wireguard 

For help, please contact  
More info: https://launchpad.net/~wireguard/+archive/ubuntu/wireguard
Press [ENTER] to continue or ctrl-c to cancel adding it 

# 这里会提示你是否继续，点击 回车键 继续，点击 Ctrl+C 键退出。
# 然后输出大概如下内容。 

gpg: keyring &#39;/tmp/tmp8bgitjjx/secring.gpg&#39; created
gpg: keyring &#39;/tmp/tmp8bgitjjx/pubring.gpg&#39; created
gpg: requesting key 504A1A25 from hkp server keyserver.ubuntu.com
gpg: /tmp/tmp8bgitjjx/trustdb.gpg: trustdb created
gpg: key 504A1A25: public key &quot;Launchpad PPA for wireguard-ppa&quot; importedgpg: Total number processed: 1
gpg:               imported: 1  (RSA: 1)
OK 

# 以上为输出示例内容（仅供参考）
</code></pre>
<h3 id="安装WireGuard"><a href="#安装WireGuard" class="headerlink" title="安装WireGuard"></a>安装WireGuard</h3><p>然后我们就可以开始安装 WireGuard 了。</p>
<pre><code class="bash"># 更新一下软件包源
apt update 

# 开始安装 WireGuard ，resolvconf 是用来指定DNS的，旧一些的系统可能没装。
apt install wireguard resolvconf -y</code></pre>
<h2 id="验证是否安装成功"><a href="#验证是否安装成功" class="headerlink" title="验证是否安装成功"></a>验证是否安装成功</h2><p>当你通过上面的步骤安装完后，请用下面的代码验证一下是否安装成功。</p>
<pre><code class="bash">lsmod | grep wireguard
# 执行该代码后，提示大概如下示例内容（仅供参考），第一行是必须要有的，至于下面的两行不同系统似乎还不一样，但是不影响使用。 
root@doubi:~# modprobe wireguard &amp;&amp; lsmod | grep wireguard
wireguard             212992  0
ip6_udp_tunnel         16384  1 wireguard
udp_tunnel             16384  1 wireguard</code></pre>
<h2 id="配置步骤"><a href="#配置步骤" class="headerlink" title="配置步骤"></a>配置步骤</h2><h3 id="生成密匙对"><a href="#生成密匙对" class="headerlink" title="生成密匙对"></a>生成密匙对</h3><p>当你确定安装成功后，就要开始配置服务端和客户端的配置文件了。放心，这很简单。</p>
<pre><code class="bash"># 首先进入配置文件目录，如果该目录不存在请先手动创建：mkdir /etc/wireguard
cd /etc/wireguard 

# 然后开始生成 密匙对(公匙+私匙)。
wg genkey | tee sprivatekey | wg pubkey &gt; spublickey
wg genkey | tee cprivatekey | wg pubkey &gt; cpublickey</code></pre>
<h3 id="查看主网卡名称"><a href="#查看主网卡名称" class="headerlink" title="查看主网卡名称"></a>查看主网卡名称</h3><p>先查看一下你的主网卡名是什么：</p>
<pre><code class="bash">ip addr
# 执行命令后，示例如下（仅供参考），lo 是本地环回 忽略，eth0 就是主网卡名了。
# 写着你的服务器外网IP的(下面 X.X.X.X 处)，就是你的主网卡，NAT的服务器则是显示内网IP。
# 如果你拿不准哪个网卡是主网卡，请留言询问。 

1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group            default qlen 1    
 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00    
 inet 127.0.0.1/8 scope host lo       
   valid_lft forever preferred_lft forever   
 inet6 ::1/128 scope host        
   valid_lft forever preferred_lft forever
2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000    
 link/ether 00:16:3c:cf:89:73 brd ff:ff:ff:ff:ff:ff    
 inet X.X.X.X/25 brd 255.255.255.255 scope global eth0       
  valid_lft forever preferred_lft forever</code></pre>
<h3 id="生成服务端配置文件"><a href="#生成服务端配置文件" class="headerlink" title="生成服务端配置文件"></a>生成服务端配置文件</h3><p><strong>如需要添加多个用户，请看教程：<a href="https://doubibackup.com/0k260c3z.html" target="_blank" rel="noopener">WireGuard —— 多用户配置教程</a></strong>接下来就开始生成服务端配置文件：</p>
<pre><code class="bash"># 井号开头的是注释说明，用该命令执行后会自动过滤注释文字。
# 下面加粗的这一大段都是一个代码！请把下面几行全部复制，然后粘贴到 SSH软件中执行，不要一行一行执行！ 

echo &quot;[Interface]
# 服务器的私匙，对应客户端配置中的公匙（自动读取上面刚刚生成的密匙内容）
PrivateKey = $(cat sprivatekey)

# 本机的内网IP地址，一般默认即可，除非和你服务器或客户端设备本地网段冲突
Address = 10.0.0.1/24 

# 运行 WireGuard 时要执行的 iptables 防火墙规则，用于打开NAT转发之类的。
# 如果你的服务器主网卡名称不是 eth0 ，那么请修改下面防火墙规则中最后的 eth0 为你的主网卡名称。
PostUp   = iptables -A FORWARD -i wg0 -j ACCEPT; iptables -A FORWARD -o wg0 -j ACCEPT; iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE

# 停止 WireGuard 时要执行的 iptables 防火墙规则，用于关闭NAT转发之类的。
# 如果你的服务器主网卡名称不是 eth0 ，那么请修改下面防火墙规则中最后的 eth0 为你的主网卡名称。
PostDown = iptables -D FORWARD -i wg0 -j ACCEPT; iptables -D FORWARD -o wg0 -j ACCEPT; iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE

# 服务端监听端口，可以自行修改，建议写 53
ListenPort = 443

# 服务端请求域名解析 
DNSDNS = 8.8.8.8

# 保持默认
MTU = 1420

# [Peer] 代表客户端配置，每增加一段 [Peer] 就是增加一个客户端账号，具体我稍后会写多用户教程。
[Peer]
# 该客户端账号的公匙，对应客户端配置中的私匙（自动读取上面刚刚生成的密匙内容）
PublicKey = $(cat cpublickey)

# 该客户端账号的内网IP地址
AllowedIPs = 10.0.0.2/32&quot;|sed &#39;/^#/d;/^\s*$/d&#39; &gt; wg0.conf 
# 上面加粗的这一大段都是一个代码！请把下面几行全部复制，然后粘贴到 SSH软件中执行，不要一行一行执行！</code></pre>
<h3 id="生成客户端配置文件接下来就开始生成客户端配置文件："><a href="#生成客户端配置文件接下来就开始生成客户端配置文件：" class="headerlink" title="生成客户端配置文件接下来就开始生成客户端配置文件："></a>生成客户端配置文件接下来就开始生成客户端配置文件：</h3><p>接下来就开始生成客户端配置文件：</p>
<pre><code class="bash"># 井号开头的是注释说明，用该命令执行后会自动过滤注释文字。
# 下面加粗的这一大段都是一个代码！请把下面几行全部复制，然后粘贴到 SSH软件中执行，不要一行一行执行！ 

echo &quot;[Interface]
# 客户端的私匙，对应服务器配置中的客户端公匙（自动读取上面刚刚生成的密匙内容）
PrivateKey = $(cat cprivatekey)

# 客户端的内网IP地址
Address = 10.0.0.2/24

# 解析域名用的
DNSDNS = 8.8.8.8

# 保持默认
MTU = 1420
[Peer]

# 服务器的公匙，对应服务器的私匙（自动读取上面刚刚生成的密匙内容）
PublicKey = $(cat spublickey)

# 服务器地址和端口，下面的 X.X.X.X 记得更换为你的服务器公网IP，端口请填写服务端配置时的监听端口
Endpoint = X.X.X.X:443
# 因为是客户端，所以这个设置为全部IP段即可
AllowedIPs = 0.0.0.0/0, ::0/0

# 保持连接，如果客户端或服务端是 NAT 网络(比如国内大多数家庭宽带没有公网IP，都是NAT)，那么就需要添加这个参数定时链接服务端(单位：秒)，如果你的服务器和你本地都不是 NAT 网络，那么建议不使用该参数（设置为0，或客户端配置文件中删除这行）
PersistentKeepalive = 25&quot;|sed &#39;/^#/d;/^\s*$/d&#39; &gt; client.conf

# 上面加粗的这一大段都是一个代码！请把下面几行全部复制，然后粘贴到 SSH软件中执行，不要一行一行执行！</code></pre>
<p>接下来你就可以将这个客户端配置文件 <strong>[/etc/wireguard/client.conf]</strong> 通过SFTP、HTTP等方式下载到本地了。</p>
<p>不过我更推荐，SSH中打开显示配置文件内容并复制出来后，本地设备新建一个文本文件 <strong>[xxx.conf] (名称随意，后缀名需要是 .conf)</strong> 并写入其中，提供给 WireGuard 客户端读取使用。</p>
<pre><code class="bash">cat /etc/wireguard/client.conf</code></pre>
<hr>
<h3 id="其他剩余其他操作："><a href="#其他剩余其他操作：" class="headerlink" title="其他剩余其他操作："></a>其他剩余其他操作：</h3><pre><code class="bash"># 赋予配置文件夹权限
chmod 777 -R /etc/wireguard 
# 打开防火墙转发功能
echo 1 &gt; /proc/sys/net/ipv4/ip_forward
echo &quot;net.ipv4.ip_forward = 1&quot; &gt;&gt; /etc/sysctl.conf
sysctl -p</code></pre>
<h2 id="启动WireGuard"><a href="#启动WireGuard" class="headerlink" title="启动WireGuard"></a>启动WireGuard</h2><pre><code class="bash">wg-quick up wg0
# 执行命令后，输出示例如下（仅供参考） 
[#] ip link add wg0 type wireguard
[#] wg setconf wg0 /dev/fd/63
[#] ip address add 10.0.0.1/24 dev wg0
[#] ip link set mtu 1420 dev wg0
[#] ip link set wg0 up[#] resolvconf -a tun.wg0 -m 0 -x
[#] iptables -A FORWARD -i wg0 -j ACCEPT; iptables -A FORWARD -o wg0 -j ACCEPT; iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE

# 如果此处没有报错：RTNETLINK answers: Operation not supported，且输入内容差不多，那么说明启动成功了！</code></pre>
<h3 id="停止WireGuard"><a href="#停止WireGuard" class="headerlink" title="停止WireGuard"></a>停止WireGuard</h3><pre><code class="bash">wg-quick down wg0</code></pre>
<h3 id="查询WireGuard状态"><a href="#查询WireGuard状态" class="headerlink" title="查询WireGuard状态"></a>查询WireGuard状态</h3><pre><code class="bash">wg</code></pre>
<h3 id="开机启动"><a href="#开机启动" class="headerlink" title="开机启动"></a>开机启动</h3><blockquote>
<p><em>注意：</em>Ubuntu 14.04 系统默认是没有 systemctl 的，所以无法配置开机启动。</p>
</blockquote>
<pre><code class="bash"># 设置开机启动
systemctl enable wg-quick@wg0
# 取消开机启动
systemctl disable wg-quick@wg0</code></pre>
<h3 id="转载"><a href="#转载" class="headerlink" title="转载"></a>转载</h3><h3 id="https-doubibackup-com-t86-fo-1-html"><a href="#https-doubibackup-com-t86-fo-1-html" class="headerlink" title="https://doubibackup.com/t86-fo_1.html"></a><a href="https://doubibackup.com/t86-fo_1.html" target="_blank" rel="noopener">https://doubibackup.com/t86-fo_1.html</a></h3>]]></content>
      <categories>
        <category>VPN</category>
      </categories>
      <tags>
        <tag>VPN</tag>
        <tag>UPD53</tag>
        <tag>WireGuard</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客搭建（一）：本地搭建及部署到GitHub</title>
    <url>//blog/2019/11/20/title4/</url>
    <content><![CDATA[<hr>
<a id="more"></a>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>首先要了解一下我们搭建博客要用到的框架。Hexo是高效的静态站点生成框架，它基于Node.js。通过Hexo，你可以直接使用Markdown语法来撰写博客。写完后只需两三条命令即可将生成的网页上传到你的github上，然后别人就可以看到你的网页啦。你无需关心网页源代码的具体细节，你只需要用心写好你的博客内容就行。</p>
<h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><ul>
<li>安装Node.js</li>
<li>添加国内镜像源</li>
<li>安装Git</li>
<li>注册Github账号</li>
<li>安装Hexo</li>
<li>连接Github与本地</li>
<li>写文章、发布文章</li>
<li>绑定域名</li>
</ul>
<h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><p>首先我们要安装<a href="https://nodejs.org/dist/v9.11.1/node-v9.11.1-x64.msi" target="_blank" rel="noopener">Node.js</a>，这里我们选择64位的。<br>安装方面一直默认<code>Next</code>就可以了<br>安装好后,按住<code>win＋R</code>打开命令提示符，输入node -v和npm -v，如果出现版本号，那么就安装成功了。</p>
<h2 id="添加国内镜像源"><a href="#添加国内镜像源" class="headerlink" title="添加国内镜像源"></a>添加国内镜像源</h2><p>如果没有梯子的话，可以使用淘宝网站的国内镜像进行加速。</p>
<pre><code class="bash">npm config set registry https://registry.npm.taobao.org</code></pre>
<h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><p>为了把本地的网页文件和博客文章上传到github上面去，我们需要用到分布式版本控制工具——<a href="https://git-scm.com/download/win" target="_blank" rel="noopener">Git下载地址</a>。</p>
<p>安装选项还是<strong>全部默认</strong>，只不过最后一步添加路径时选择<code>Use Git from the Windows Command Prompt</code>，这样我们就可以直接在命令提示符里打开git了。</p>
<p>安装完成后在命令提示符中输入<code>git --version</code>验证是否安装成功。</p>
<h2 id="注册Github账号"><a href="#注册Github账号" class="headerlink" title="注册Github账号"></a>注册Github账号</h2><p>接下来我们就要去注册一个GitHub账号，作为一个合格的程序员有一个GitHub是非常重要的。<br>然后打开<a href="https://github.com/" target="_blank" rel="noopener">GitHub</a>, 创建一个新的项目，如图：</p>
<p><img src="/images/title4_1.PNG" alt="avatar"></p>
<p>然后如下图所示，输入项目名字，后面一定要加<code>.github.io</code>后缀，README初始化也要勾上。名称一定要和你的github名字完全一样，比如我github名字叫<code>zhujiajun999</code>，那么仓库名字一定要是<code>zhujiajun999.github.io</code>。<br>因为我已经创建，所以红色提示项目名重复了</p>
<p><img src="/images/title4_2.PNG" alt="avatar"></p>
<p>然后项目就建成了，点击<code>Settings</code>，向下拉到最后有个<code>GitHub Pages</code>，点击<code>Choose a theme</code>选择一个主题。然后等一会儿，再回到<code>GitHub Pages</code>，会变成下面这样：</p>
<p><img src="/images/title4_3.PNG" alt="avatar"></p>
<p>点击我图片上打码那个链接，就会出现自己的网页啦</p>
<h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>在合适的地方新建一个文件夹，用来存放自己的博客文件，比如我的博客文件都存放在<code>D:\个人博客</code>目录下（建议用英语）。</p>
<p>在该目录下右键点击<code>Git Bash Here</code>，打开git的控制台窗口，以后我们所有的操作都在git控制台进行，就不要用Windows自带的控制台了。</p>
<p>定位到该目录下，输入<code>npm install -g hexo-cli</code>安装Hexo。</p>
<pre><code class="bash">用npm 命令时可能会提示warning,只要不是error，一般来说都不用太过担心。
另一个就是执行npm install下载时可能会很久不动好像卡了一样，不用太担心，
这都是正常情况，可以多等一会，或者使用爬山工具。</code></pre>
<p>安装完后输入<code>hexo -v</code>验证是否安装成功。</p>
<p>然后就要初始化我们的网站，输入<code>hexo init</code>初始化文件夹，按下回车Enter，<code>Git bash</code>会自动下载相关文件</p>
<pre><code class="bash">速度可能会很慢，请耐心等待，若是在这步出现以下错误 :
error: RPC failed; curl 56 OpenSSL SSL_read: SSL_ERROR_SYSCALL, errno 10054
fatal: the remote end hung up unexpectedly
fatal: protocol error: bad pack header
WARN git clone failed. Copying data instead
WARN Failed to install dependencies. Please run &#39;npm install&#39; manually!

或是一直卡百分比，我们在 Git Bash 中按 Ctrl+C 取消下载，
然后删除文件夹中所有文件，重新执行上面的 hexo init 命令</code></pre>
<p>若出现:</p>
<p><img src="/images/title4_7.PNG" alt="avatar"></p>
<p>这样本地的网站配置也弄好啦，输入<code>hexo g</code>生成静态网页，然后输入<code>hexo s</code>打开本地服务器，然后浏览器打开<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a>，就可以看到我们的博客啦，效果如下：</p>
<p><img src="/images/title4_4.PNG" alt="avatar"></p>
<p>回到Git按<code>ctrl+c</code>关闭本地服务器。</p>
<h2 id="连接Github与本地"><a href="#连接Github与本地" class="headerlink" title="连接Github与本地"></a>连接Github与本地</h2><p>Name写你的GitHub用户名<br>Email写你注册GitHub用的邮箱</p>
<pre><code class="bash">git config --global user.name &quot;zhujiajun999&quot;
git config --global user.email &quot;64590930@qq.com&quot;</code></pre>
<p>然后生成密钥SSH key：</p>
<pre><code class="bash">ssh-keygen -t rsa -C &quot;64590930@qq.com&quot;</code></pre>
<p>打开<a href="github.com">Github</a>，在头像下面点击<code>settings</code>，再点击<code>SSH and GPG keys</code>，新建一个SSH，名字随便。</p>
<p><img src="/images/title4_5.PNG" alt="avatar"></p>
<p>git bash中输入</p>
<pre><code class="bash">cat ~/.ssh/id_rsa.pub</code></pre>
<p>将输出的内容复制到框中，点击确定保存。</p>
<p>输入<code>ssh -T git@github.com</code>，如果出现你的用户名，结尾有access那就成功了。</p>
<p>打开博客根目录下的<code>_config.yml</code>文件,我的在<code>D:\个人博客\ _config.yml</code>，这是博客的配置文件，在这里你可以修改与博客相关的各种信息。</p>
<p>修改最后一行的配置：</p>
<pre><code class="bash">deploy:
  type: git
  repository: https://github.com/zhujiajun999/zhujiajun999.github.io
  branch: master</code></pre>
<p>repository修改为你自己的github项目地址。<br>注意这里 <code>:</code>后面一定要加空格，不然会出错。</p>
<h2 id="写文章、发布文章（部署）"><a href="#写文章、发布文章（部署）" class="headerlink" title="写文章、发布文章（部署）"></a>写文章、发布文章（部署）</h2><p>首先在博客根目录下右键打开<code>git bash</code>，安装一个扩展<code>npm i hexo-deployer-git</code>。</p>
<p>然后输入<code>hexo new post &quot;article title&quot;</code>，新建一篇文章。</p>
<p>然后打开<code>D:\个人博客\source\ _posts</code>的目录，可以发现下面多了一个文件夹和一个.md文件，一个用来存放你的图片等数据，另一个就是你的文章文件啦。</p>
<p>编写完markdown文件后，<strong>个人博客</strong>根目录下输入<code>hexo clean &amp;&amp; hexo g</code>清空缓存并生成静态网页，然后输入<code>hexo s</code>可以本地预览效果，最后输入<code>hexo d</code>上传到github上。<br>在第一次推送时，会出现：</p>
<p><img src="/images/title4_8.PNG" alt="avatar"></p>
<p>这是提示要输入你的Github账号密码，因为是第一次推送，Windows要验证账号密码才能确认推送部署到你的Github上,输入账号密码,账号为你注册的邮箱。</p>
<p>这时打开你的github.io主页就能看到发布的文章啦(可能上传后要过几分钟才显示)。</p>
<h2 id="绑定域名（无域名可跳过）"><a href="#绑定域名（无域名可跳过）" class="headerlink" title="绑定域名（无域名可跳过）"></a>绑定域名（无域名可跳过）</h2><p>现在默认的域名还是<code>xxx.github.io</code>，是不是很没有牌面？想不想也像我一样弄一个专属域名呢，首先你得购买一个域名，xx云都能买，看你个人喜好了。</p>
<p>以我的阿里云为例，如下图所示，添加两条解析记录：</p>
<p><img src="/images/title4_6.PNG" alt="avatar"></p>
<p>记录值写自己GitHub的域名就行了，该有一种ping自己GitHub IP的方法比较麻烦，这里就省略不做了。</p>
<p>然后打开你的github博客项目，点击<code>settings</code>，拉到下面<code>Custom domain</code>处，填上你自己的域名，保存.</p>
<p>这时候你的项目根目录应该会出现一个名为<code>CNAME</code>的文件了。如果没有的话，打开你本地博客<code>/source</code>目录，我的是D:\个人博客\source，新建<code>CNAME</code>文件，<strong>注意没有后缀</strong>。然后在里面写上你的域名，保存。最后运行<code>hexo g &amp;&amp;hexo d</code>上传到github。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><p><a href="https://blog.csdn.net/jiunian_2761/article/details/97388534#1Github_" target="_blank" rel="noopener">https://blog.csdn.net/jiunian_2761/article/details/97388534#1Github_</a></p>
</li>
<li><p><a href="https://godweiyang.com/2018/04/13/hexo-blog/" target="_blank" rel="noopener">https://godweiyang.com/2018/04/13/hexo-blog/</a></p>
</li>
</ol>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>搭建</tag>
        <tag>博客</tag>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>练习题</title>
    <url>//blog/2019/11/14/title3/</url>
    <content><![CDATA[<hr>
<a id="more"></a>

<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>学习中的练习题，记录下来，日后复习用。</p>
<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><h3 id="Java数字输出-包含数字输出"><a href="#Java数字输出-包含数字输出" class="headerlink" title="Java数字输出-包含数字输出"></a>Java数字输出-包含数字输出</h3><pre><code class="java">public class MathTest {
/*
 * 第一题：求出1~2019中所有数中含有2，0，1，9的个数并求出所有数之和：
 *
 */
 //方法一
 public static void main(String[] args) {
  int sum = 0;
     int count = 0;
         for (int i = 1; i &lt;= 2019; i++) {
            String src = String.valueOf(i);
            if (src.contains(&quot;2&quot;) || src.contains(&quot;0&quot;) || src.contains(&quot;1&quot;)
                 || src.contains(&quot;9&quot;)) {
                System.out.println(i);
                sum += i;
                count++;
                }
            }
        System.out.println(&quot;个数：&quot; + count);
        System.out.println(&quot;1~2019中所有数中含有2，0，1，9的个数之和:&quot; + sum);

  }

}
</code></pre>
<pre><code class="java">...
2017
2018
2019
个数：1761
1~2019中所有数中含有2，0，1，9的个数之和:1905111</code></pre>
<h3 id="Java数字输出-素数"><a href="#Java数字输出-素数" class="headerlink" title="Java数字输出-素数"></a>Java数字输出-素数</h3><pre><code class="java">//题目一：判断101-200之间有多少个素数，并输出所有素数。

    public static void main(String[] args) {
        int count = 0;
        for (int i = 101; i &lt; 200; i++) {
            boolean b = false;
            for (int j = 2; j &lt;= (i - 1); j++) {
                // 内循环判断i
                // 除了1和本身，能和其他数整除b=false
                if (i % j == 0) {
                   b = false;
                   break;
                } else {// b=true
                   b = true;
                }
             }
                if (b == true) {
                   count++;
                   //System.out.println(i);
            }
        }
           System.out.println(&quot;一共有：&quot;+count+&quot;个素数&quot;);
 }</code></pre>
<pre><code class="java">一共有：21个素数</code></pre>
<h3 id="Java数字输出-水仙花数"><a href="#Java数字输出-水仙花数" class="headerlink" title="Java数字输出-水仙花数"></a>Java数字输出-水仙花数</h3><p>所谓 “水仙花数 “是指一个三位数，其各位数字立方和等于该数本身。例如：153是一个 “水仙花数 “，因为153=1的三次方＋5的三次方＋3的三次方。</p>
<pre><code class="java">//题目二：打印出100-1000内所有的 &quot;水仙花数 &quot;
public static void main(String[] args) {
        int a,b,c;
        for(int i=101;i&lt;1000;i++){
        a = i / 100;
        b = (i - (a * 100)) / 10;
        c = i - ((a * 100) + (b * 10));
          int sp1 =a*a*a;
          int sp2 =b*b*b;
          int sp3 =c*c*c;
        if(sp1 + sp2 +sp3 == i){
           System.out.println(&quot;判斷到的水花數為：&quot;+i+
           &quot;,&quot;+&quot;因为&quot;+sp1+&quot;+&quot;+sp2+&quot;+&quot;+sp3+&quot;+&quot;+&quot;=&quot;+ i);
          }
        }
    }</code></pre>
<h3 id="Java数字输出-正整数分解质因数"><a href="#Java数字输出-正整数分解质因数" class="headerlink" title="Java数字输出-正整数分解质因数"></a>Java数字输出-正整数分解质因数</h3><pre><code class="java">//题目三：将一个正整数分解质因数，例如：输入90，打印出90=2*3*3*5
public static void main(String[] args) {
        Scanner a = new Scanner(System.in);
        System.out.println(&quot;请输入数字：&quot;);
        int n = a.nextInt();
        for(int k=2;k&lt;=n/2;k++){
                if(n%k == 0){
                System.out.print(k+&quot;*&quot;);
                        n= n/k;   //用递归把n重新定值
                        k=2; //这步很重要，让for循环重新执行
                }
            }
                System.out.println(n); //把最后一个质因数输出
        }</code></pre>
<pre><code class="java">请输入数字：
65
5*13</code></pre>
<h3 id="Java数字输出-嵌套条件运算符"><a href="#Java数字输出-嵌套条件运算符" class="headerlink" title="Java数字输出-嵌套条件运算符"></a>Java数字输出-嵌套条件运算符</h3><pre><code class="java">/* 题目四：利用条件运算符的嵌套来完成此题：学习成绩&gt; =90分的同学用A表示,
   60-89分之间的用B表示，60分以下的用C表示。（只用一行代码判断：三目运算符） */
    public static void main(String[] args) {
        Scanner sc =new Scanner(System.in);
        System.out.print(&quot;请输入分数：&quot;);
        int score = sc.nextInt();
  char sco= score &gt;= 90 ? &#39;A&#39; : score &gt;= 60 ? &#39;B&#39; : &#39;C&#39;;
        System.out.println(&quot;成绩评价为：&quot;+ sco);
    }</code></pre>
<pre><code class="java">请输入分数：90
成绩评价为：A</code></pre>
<h3 id="Java数字输入-数字转文字"><a href="#Java数字输入-数字转文字" class="headerlink" title="Java数字输入-数字转文字"></a>Java数字输入-数字转文字</h3><p>要求输入一个三位阿拉伯数字，将其转换成文字<br>例：输入：123，结果：一百二十三<br>扩展：如果不是三位数呢，任意位数</p>
<pre><code class="java">import java.util.Scanner;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class test {
 public static void main(String[] args) {
        Scanner in=new Scanner(System.in);
        int MoneyNum=0;//金钱数目(整数型);
        System.out.println(&quot;请输入金钱数目：&quot;);
        MoneyNum=in.nextInt();
        T_money(MoneyNum);
    }
    public static void T_money(int money) {
        int num=0;
        String[] MoneyChinese= {&quot;零&quot;,&quot;一&quot;,&quot;二&quot;,&quot;三&quot;,&quot;四&quot;,&quot;五&quot;,&quot;六&quot;,&quot;七&quot;,&quot;八&quot;,&quot;九&quot;};//汉字一到九
        String[] ChineseNum= {&quot;&quot;,&quot;拾&quot;,&quot;百&quot;,&quot;千&quot;,&quot;万&quot;,&quot;亿&quot;};//汉字单位
        System.out.println(ChineseNum[0]);
        Integer Money=new Integer(money);//转化为Integer方便转发类型
        char[] Moneynum=Money.toString().toCharArray();//转换成字符串方便转换成整形
        String[] MoneyChineseNum =new String[Moneynum.length];//用来存放转换后的整形数组
        for(int i=0;i&lt;Moneynum.length;i++){
                num=Moneynum[i]-48;//转换成整形
                MoneyChineseNum[i]=MoneyChinese[num];//用来映射汉子一到九
        }
        StringBuffer MoneyTime=new StringBuffer();//字符缓冲区方便添加
                int nums=0;//统计要出现的”万“
                int Numss=0;//统计要出现的”亿“
            for(int i=MoneyChineseNum.length-1;i&gt;=0;i--) {
                if(!MoneyChineseNum[i].equals(&quot;零&quot;)){   
                if(!ChineseNum[nums].equals(&quot;万&quot;))
                        MoneyTime.append(ChineseNum[nums]);
                }
        if(nums==4&amp;&amp;Numss==0){//添加“万”字因为万字必须出现（必能想千、百、拾，前面有零而省去）
                MoneyTime.append(ChineseNum[nums]);
                        nums=0;
                        Numss=1;
                if(!MoneyChineseNum[i].equals(&quot;零&quot;))
                {MoneyTime.append(MoneyChineseNum[i]);}//如果&quot;万&quot;字前有&quot;零&quot;除去万字前的 &quot;零&quot;
        }
                else if(nums==4&amp;&amp;Numss==1){//添加“亿”字因为万字必须出现（必能想千、百、拾，前面有零而省去）
                MoneyTime.append(ChineseNum[nums+1]);
                        nums=0;
                        Numss=0;
                if(!MoneyChineseNum[i].equals(&quot;零&quot;))
                {MoneyTime.append(MoneyChineseNum[i]);}//如果&quot;亿&quot;字前有&quot;零&quot;除去亿字前的 &quot;零&quot;    
                }else {
        MoneyTime.append(MoneyChineseNum[i]);
                }
                ++nums;
        }
        System.out.println(MoneyTime.reverse().toString());
        }

}  
</code></pre>
<pre><code class="java">请输入金钱数目：
12345

一万二千三百四拾五</code></pre>
<h3 id="Java数字-兔子"><a href="#Java数字-兔子" class="headerlink" title="Java数字-兔子"></a>Java数字-兔子</h3><pre><code class="java">/*有一对兔子，从出生后第3个月起每个月都生一对兔子，小兔子长到第三个月后每个月又生一对兔子，假如兔子都不死，请输出前10个月每个月的的兔子总数为多少？ */
public class Test1 {
       public static void main(String[] args) {
              int m1=1,m2=1,m3,M=10;
              for(int i=3;i&lt;=M;i++){
                     m3=m1+m2;
                     m1=m2;
                     m2=m3;
              if(i==10){
                     System.out.println(&quot;第&quot;+i+&quot;个月兔子数为：&quot;+m2);
                     }
              }
       }
}
</code></pre>
<pre><code class="bash">第10个月兔子数为：55</code></pre>
<h3 id="Java数字"><a href="#Java数字" class="headerlink" title="Java数字"></a>Java数字</h3><pre><code class="java">/*　给定n个正整数，找出它们中出现次数最多的数。如果这样的数有多个，请输出其中最小的一个。
输入格式
　　输入的第一行只有一个正整数n(1 ≤ n ≤ 1000)，表示数字的个数。
　　输入的第二行有n个整数s1, s2, …, sn (1 ≤ si ≤ 10000, 1 ≤ i ≤ n)。相邻的数用空格分隔。
输出格式
输出这n个次数中出现次数最多的数。如果这样的数有多个，输出其中最小的一个。
样例输入
6
10 1 10 20 30 20
样例输出
10
*/
public class Test4 {
        public static void main(String[] args) {
                int num[],n;
                int count[] = new int[10000];
                Scanner scanner  = new Scanner(System.in);
                System.out.println(&quot;请输入数字的数量:&quot;);
                n = scanner .nextInt();
                num = new int[n];
                System.out.println();
                System.out.println(&quot;请输入要输入的数字:&quot;);
                for (int i = 0; i &lt; n; i++) {
                                num[i] = scanner.nextInt();
                                count[num[i]]++;
                }
                int max_index = 0;
                for (int i = 0; i &lt; n; i++) {
                if (count[num[i]] &gt; count[num[max_index]]) {
                      max_index = i;
                }
         }
                System.out.println(&quot;出现次数最多的数字是:&quot;+num[max_index]);
        }
}</code></pre>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>练习</tag>
      </tags>
  </entry>
  <entry>
    <title>快速导航</title>
    <url>//blog/2019/11/06/title2/</url>
    <content><![CDATA[<hr>
<a id="more"></a>

<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>快速导航地址，用于测试使用</p>
<h2 id="接码内"><a href="#接码内" class="headerlink" title="接码内"></a>接码内</h2><h3 id="手机接码"><a href="#手机接码" class="headerlink" title="手机接码"></a>手机接码</h3><ol>
<li><p>z-sms: <a href="http://z-sms.com" target="_blank" rel="noopener">http://z-sms.com</a></p>
</li>
<li><p>在线接收短信验: <a href="https://yunduanxin.net/" target="_blank" rel="noopener">https://yunduanxin.net/</a><br>有多个国家电话短信接收号码，还有临时邮箱地址</p>
</li>
</ol>
<h3 id="邮箱接码"><a href="#邮箱接码" class="headerlink" title="邮箱接码"></a>邮箱接码</h3><ol>
<li><p>temp-mail: <a href="https://temp-mail.org/zh/" target="_blank" rel="noopener">https://temp-mail.org/zh/</a><br>10分钟有效时间</p>
</li>
<li><p>10分钟邮箱: <a href="10minutemail.net/?lang=zh-cn">10minutemail.net/?lang=zh-cn</a></p>
</li>
<li><p>ShortTimeMail: <a href="shorttimemail.com/zh-Hans">shorttimemail.com/zh-Hans</a><br>30分钟有效时间</p>
<ol>
<li>点击“随机”按钮随机生成一个临时邮箱地址。</li>
<li>点击邮箱地址右侧的复制按钮复制该邮箱地址。</li>
<li>邮箱过期后，点击“续30分钟”，可以延长该邮箱30分钟使用时间。</li>
<li>点击“销毁”按钮删除该邮箱以及邮箱中的所有邮件。</li>
<li>邮箱过期的12小时后，系统将自动回收该邮箱地址，在过期的12小时内可以不断续订该邮箱。</li>
</ol>
</li>
</ol>
<h2 id="前端素材"><a href="#前端素材" class="headerlink" title="前端素材"></a>前端素材</h2><ol>
<li><p>Button: <a href="https://varin6.github.io/Hover-Buttons/" target="_blank" rel="noopener">https://varin6.github.io/Hover-Buttons/</a><br>前端按钮素材</p>
</li>
<li><p>IconFont: <a href="https://www.iconfont.cn/" target="_blank" rel="noopener">https://www.iconfont.cn/</a><br>阿里巴巴的ICON图标库</p>
</li>
<li><p>CSS ICON: <a href="https://cssicon.space/#/" target="_blank" rel="noopener">https://cssicon.space/#/</a><br>CSS编写的ICON图标库</p>
</li>
<li><p>CodePen：<a href="https://codepen.io/" target="_blank" rel="noopener">https://codepen.io/</a><br>前端开发者的代码托管网站</p>
</li>
</ol>
<h2 id="配色方案"><a href="#配色方案" class="headerlink" title="配色方案"></a>配色方案</h2><ol>
<li><p>ColorHunt: <a href="https://colorhunt.co/" target="_blank" rel="noopener">https://colorhunt.co/</a></p>
</li>
<li><p>ColorSchemeSesigner: <a href="http://www.peise.net/tools/web/" target="_blank" rel="noopener">http://www.peise.net/tools/web/</a></p>
</li>
<li><p>FLAT UI Colors: <a href="https://flatuicolors.com/" target="_blank" rel="noopener">https://flatuicolors.com/</a></p>
</li>
<li><p>中国色: <a href="http://zhongguose.com/" target="_blank" rel="noopener">http://zhongguose.com/</a><br>中国风格颜色的配色方案网站</p>
</li>
<li><p>Khroma: <a href="http://khroma.co/" target="_blank" rel="noopener">http://khroma.co/</a><br>Khroma是一个在线颜色工具。它利用人工智能，通过分析你选择的颜色，来生成实用性非常高的调色板的配色工具。甚至可以实现更高精度的组合，可以说是能够「成长」的配色工具。</p>
</li>
<li><p>LOL Colors: <a href="http://www.lolcolors.com//" target="_blank" rel="noopener">http://www.lolcolors.com//</a><br>UI不错，水滴配色</p>
</li>
<li><p>Colordrop: <a href="https://colordrop.io/" target="_blank" rel="noopener">https://colordrop.io/</a><br>这款配色工具和 LOL Colors 有点相似，网页设计相当简单，提供各种色彩组合，没有太多额外或复杂难懂的功能，实在深得我心。</p>
</li>
<li><p>Colourco: <a href="http://www.colourco.de/" target="_blank" rel="noopener">http://www.colourco.de/</a><br>先简单介绍一下颜色变化：<br>色调：鼠标左右移动或「Ctrl+ ← + →」<br>亮度：鼠标上下移动或「Ctrl + ↑ + ↓」<br>饱和度：Ctrl+ Shift + ↑ + ↓<br>鼠标单击锁定颜色，点击“垃圾桶”图标删除颜色<br>操作非常简单，快去打开网页，慢慢享受色彩世界的乐趣吧！</p>
</li>
<li><p>Klart Colors: <a href="https://klart.co/colors/" target="_blank" rel="noopener">https://klart.co/colors/</a></p>
</li>
<li><p>Color-Claim: <a href="http://www.vanschneider.com/colors" target="_blank" rel="noopener">http://www.vanschneider.com/colors</a><br>推荐了以上那么多配色网站，有的实用有的貌美。按理说该成为配色大师了吧！但如果你眼光和审美还不到位，真到了自己做设计的时候，还是会觉得配色不够高级。即便拿到一个好看的配色，也不知道怎么将它运用到设计中。那么，Color Claim可能会给你提供一些帮助。</p>
</li>
<li><p>MaterialPalette: <a href="http://www.materialpalette.com/" target="_blank" rel="noopener">http://www.materialpalette.com/</a></p>
</li>
</ol>
<h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><h3 id="谷歌类"><a href="#谷歌类" class="headerlink" title="谷歌类"></a>谷歌类</h3><ol>
<li>谷歌插件: <a href="https://173app.com/chrome-ext" target="_blank" rel="noopener">https://173app.com/chrome-ext</a><br>下载好的插件把后缀名改为<strong>压缩包格式</strong>，然后打开<strong>扩展程序</strong>，开启左上角<strong>开发者模式</strong>，让后点击右上角<strong>加载已解压的扩张程序</strong>，找到目录导入</li>
</ol>
<h3 id="动漫"><a href="#动漫" class="headerlink" title="动漫"></a>动漫</h3><ol>
<li>嘛哩嘛哩: <a href="http://malimali.com/" target="_blank" rel="noopener">http://malimali.com/</a><br>多个国家的全部动漫免费看</li>
</ol>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>测试</tag>
        <tag>导航</tag>
      </tags>
  </entry>
  <entry>
    <title>博客测试</title>
    <url>//blog/2019/11/04/title/</url>
    <content><![CDATA[<hr>
<a id="more"></a>
<h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><pre><code class="bash"> ！！！！！！！！！！
 每一项的 : 后面均有一个空格
 且 : 为英文符号
 ！！！！！！！！！！

title:
 文章标题，可以为中文

date:
 建立日期，如果自己手动添加，请按固定格式
 就算不写，页面每篇文章顶部的发表于……也能显示
 只要在主题配置文件中，配置了 created_at 就行
 那为什么还要自己加上？
 自定义文章发布的时间

updated:
 更新日期，其它与上面的建立日期类似
不过在页面每篇文章顶部，是更新于……
 在主题配置文件中，是 updated_at

permalink:
 若站点配置文件下的 permalink 配置了 title
 则可以替换文章 URL 里面的 title（文章标题）

categories:
 分类，支持多级，比如：
 - technology
 - computer
 - computer-aided-art
 则为 technology/computer/computer-aided-art
 （不适用于 layout: page）

tags:
 标签
 多个可以这样写 [标签1,标签2,标签3]
 （不适用于 layout: page）

description:
 文章的描述，在每篇文章标题下方显示
 并且作为网页的 description 元数据
 如果不写，则自动取 &lt;!-- more --&gt;
 之前的文字作为网页的 description 元数据

keywords:
 关键字，并且作为网页的 keywords 元数据
 如果不写，则自动取 tags 里的项
 作为网页的 keywords 元数据

comments:
 是否开启评论
 默认值是 true
 要关闭写 false

layout:
 页面布局，默认值是 post，默认值可以在
 站点配置文件中修改 default_layout
 另：404 页面可能用到，将其值改为 false

type:
 categories，目录页面
 tags，标签页面
 picture，用来生成 group-pictures
 quote？
 https://io-oi.me/tech/test/

photos:
# Gallery support，用来支持画廊╱相册，用法如下：
# - photo_url_1
# - photo_url_2
# - photo_url_3
# https://io-oi.me/tech/test/

link:
# 文章的外部链接
# https://io-oi.me/tech/test/

image:
# 自定义的文章摘要图片，只在页面展示，文章内消失
# 此项只有参考本文 5.14 节配置好，否则请勿添加！

sticky:
# 文章置顶
# 此项只有参考本文 5.15 节配置好，否则请勿添加！

password:
# 文章密码，此项只有参考教程：
# http://shenzekun.cn/hexo的next主题个性化配置教程.html
# 第 24 节，配置好，否则请勿添加！
# 发现还是有 bug 的，就是右键在新标签中打开
# 然后无论是否输入密码，都能看到内容
</code></pre>
<h3 id="内容部分"><a href="#内容部分" class="headerlink" title="内容部分"></a>内容部分</h3><pre><code class="bash"> 1. ##(空格)相当于前端的h1，###前端的h2

 2. ` ``[language] [title] [url] [link-text]
 代码
` ``
[language] 是代码语言的名称，用来设置代码块颜色高亮，非必须；
[title] 是顶部左边的说明，非必须；
[url] 是顶部右边的超链接地址，非必须；
[link text] 如它的字面意思，超链接的名称，非必须。

 3. [内容](网站) //可以把内容变成一个超链接，可以进行点击

 4. 打开blog\source\_posts的目录，可以发现下面多了一个文件夹和一个.md文件，
一个用来存放你的图片等数据，另一个就是你的文章文件啦。
编写完markdown文件后，根目录下输入hexo g生成静态网页，然后输入hexo s可以本地预览效果，
最后输入hexo d上传到github上。这时打开你的github.io主页就能看到发布的文章啦。
</code></pre>
]]></content>
      <categories>
        <category>测试</category>
      </categories>
      <tags>
        <tag>测试</tag>
        <tag>Blog</tag>
      </tags>
  </entry>
</search>
